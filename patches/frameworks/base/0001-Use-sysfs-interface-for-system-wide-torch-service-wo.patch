From 6632eeb2567ac821ba75b83b363fae8baa2cc3a3 Mon Sep 17 00:00:00 2001
From: S-trace <S-trace@list.ru>
Date: Fri, 18 Sep 2015 21:42:20 +0300
Subject: [PATCH 1/2] Use sysfs interface for system-wide torch service
 (workaround for some users)

Change-Id: Id8eb09920c3f7c80a7bd9730a6d4ae1c64be368d
---
 .../core/java/com/android/server/TorchService.java | 88 ++++++++++++----------
 1 file changed, 50 insertions(+), 38 deletions(-)

diff --git a/services/core/java/com/android/server/TorchService.java b/services/core/java/com/android/server/TorchService.java
index 766d7ef..be7a71c 100644
--- a/services/core/java/com/android/server/TorchService.java
+++ b/services/core/java/com/android/server/TorchService.java
@@ -44,10 +44,14 @@ import android.util.Log;
 import android.util.Size;
 import android.util.SparseArray;
 import android.view.Surface;
+import android.os.PowerManager;
+import android.os.PowerManager.WakeLock;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.io.FileWriter;
+import java.io.IOException;
 
 import com.android.internal.R;
 
@@ -95,6 +99,15 @@ public class TorchService extends ITorchService.Stub {
     private Surface mSurface;
 
     private boolean mReceiverRegistered;
+    private WakeLock mWakeLock;
+
+    public static final int OFF       = 0;
+    public static final int ON        = 1;
+    public static final int HIGH      = 128;
+    public static final int DEATH_RAY = 3;
+
+    private FileWriter mFlashDeviceWriter = null;
+
     private BroadcastReceiver mReceiver = new BroadcastReceiver() {
         @Override
         public void onReceive(Context context, Intent intent) {
@@ -123,6 +136,8 @@ public class TorchService extends ITorchService.Stub {
         mCamerasInUse = new SparseArray<CameraUserRecord>();
         mCameraManager = (CameraManager) context.getSystemService(Context.CAMERA_SERVICE);
         initialize();
+        PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+        this.mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Torch");
     }
 
     public void initialize() {
@@ -380,32 +395,30 @@ public class TorchService extends ITorchService.Stub {
             synchronized (this) {
                 enabled = mTorchEnabled && !forceDisable;
             }
-            if (enabled) {
-                if (mCameraDevice == null) {
-                    if (!mOpeningCamera) {
-                        startDevice();
-                    }
-                    return;
-                }
-                if (mSession == null) {
-                    startSession();
-                    return;
-                }
-                if (mFlashlightRequest == null) {
-                    CaptureRequest.Builder builder = mCameraDevice.createCaptureRequest(
-                            CameraDevice.TEMPLATE_PREVIEW);
-                    builder.set(CaptureRequest.FLASH_MODE, CameraMetadata.FLASH_MODE_TORCH);
-                    builder.addTarget(mSurface);
-                    CaptureRequest request = builder.build();
-                    mSession.capture(request, null, mHandler);
-                    mFlashlightRequest = request;
-                    dispatchStateChange(true);
-                }
-            } else {
-                teardownTorch();
+	if (enabled) {
+	            Log.d(TAG, "S-trace: enabling torch via sysfs");
+		try{
+		if (mFlashDeviceWriter == null) {
+			mFlashDeviceWriter = new FileWriter("/sys/class/leds/flashlight/brightness");
+		}
+		mFlashDeviceWriter.write(String.valueOf(127));
+		mFlashDeviceWriter.flush();
+		if (!mWakeLock.isHeld()) {
+			mWakeLock.acquire();
+		}
+		dispatchStateChange(true);
+		} catch (IOException e) {
+            if (mWakeLock.isHeld()) {
+                mWakeLock.release();
+            }
+            throw new RuntimeException("Can't open flash device", e);
+        }
+
+	} else {
+		teardownTorch();
             }
 
-        } catch (CameraAccessException|IllegalStateException|UnsupportedOperationException e) {
+        } catch (IllegalStateException|UnsupportedOperationException e) {
             Log.e(TAG, "Error in updateFlashlight", e);
             handleError();
         }
@@ -420,24 +433,23 @@ public class TorchService extends ITorchService.Stub {
     }
 
     private void teardownTorch() {
+	            Log.d(TAG, "S-trace: disabling torch");
+	            try{
         setListenForScreenOff(false);
         dispatchStateChange(false);
-        if (mCameraDevice != null) {
-            mCameraDevice.close();
-            mCameraDevice = null;
+	mFlashDeviceWriter.write(String.valueOf(0));
+        mFlashDeviceWriter.close();
+        mFlashDeviceWriter = null;
+        if (mWakeLock.isHeld()) {
+            mWakeLock.release();
         }
-        mOpeningCamera = false;
-        mSession = null;
-        mFlashlightRequest = null;
-        if (mSurface != null) {
-            mSurface.release();
-        }
-        mSurface = null;
-        if (mSurfaceTexture != null) {
-            mSurfaceTexture.release();
+        } catch (IOException e) {
+            if (mWakeLock.isHeld()) {
+                mWakeLock.release();
+            }
+            throw new RuntimeException("Can't open flash device", e);
         }
-        mSurfaceTexture = null;
-        mTorchCameraId = -1;
+
     }
 
     private void handleError() {
-- 
2.9.3

